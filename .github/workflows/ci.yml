name: CI

on:
  push:
    branches: 
      - master
      - integration
      - experimental*
      - release_*
  repository_dispatch:
    types:
      - metwork-trigger*

env:
    WORKFLOW_SCRIPTS_DIR: .github/workflows
    DOCKER_WORKFLOW_SCRIPTS_DIR: /src/.github/workflows
    PAYLOAD_BRANCH: ${{ github.event.client_payload.branch}}

jobs:
  ci_build:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.client_payload.branch || github.ref }}
      - name: set variables
        id: SetVariables
        run: |
          ${WORKFLOW_SCRIPTS_DIR}/set_variables.sh
      - name: debug env
        run: |
          env
          echo "Dockerfile"
          cat ./Dockerfile
      - name: docker build and push not master
        id: DockerStep
        run: |
          docker login -p ${{ secrets.DOCKER_PASSWORD }} -u ${{ secrets.DOCKER_USERNAME }}
          docker pull ${{ steps.SetVariables.outputs.tag_branch }}
          HASH_BEFORE=`docker images -q ${{ steps.SetVariables.outputs.tag_branch }}` 
          if ${{ steps.SetVariables.outputs.branch != 'master' }}; then
            docker build -t ${{ steps.SetVariables.outputs.tag_branch }} --build-arg BRANCH=${{ steps.SetVariables.outputs.branch }} --build-arg CACHEBUST=${{ github.run_number }} .
          else
            docker build -t ${{ steps.SetVariables.outputs.tag_branch }} -t ${{ steps.SetVariables.outputs.tag_latest }} --build-arg BRANCH=${{ steps.SetVariables.outputs.branch }} --build-arg CACHEBUST=${{ github.run_number }} .
          fi
          HASH_AFTER=`docker images -q ${{ steps.SetVariables.outputs.tag_branch }}`
          if test "$${HASH_BEFORE}" = "$${HASH_AFTER}"; then
            echo "::set-output name=dispatch_bypass::true"
          else
            echo "::set-output name=dispatch_bypass::false"
            docker push ${{ steps.SetVariables.outputs.tag_branch }}
            if ${{ steps.SetVariables.outputs.branch == 'master' }}; then
              docker push ${{ steps.SetVariables.outputs.tag_latest }}
            fi
          fi





      - name: dispatch mfextaddon_python3_ia
        if: ${{ github.event_name != 'pull_request' && steps.SetVariables.outputs.branch != 'null' && steps.DockerStep.outputs.dispatch_bypass == 'false' }}
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.METWORK_ACCESS_TOKEN }}
          repository: metwork-framework/mfextaddon_python3_ia
          event-type: metwork-trigger-${{ steps.SetVariables.outputs.branch }}
          client-payload: '{"branch": "${{ steps.SetVariables.outputs.branch }}"}'
